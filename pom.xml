<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>site.deiv70.springboot</groupId>

	<artifactId>healthcare</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<name>Healthcare API</name>
	<description>Healthcare API Project [ Spring Boot 3 : DDD + Hexagonal + Data JPA + Swagger (OpenAPI) + REST Web ]</description>

	<developers>
		<developer>
			<id>Deiv70</id>
			<name>David Gomez Garcia</name>
			<url>https://github.com/Deiv70</url>
		</developer>
	</developers>

	<reporting>
		<!-- Change the Default Reporting Directory: "${project.build.directory}/site" -->
		<!-- <outputDirectory>${project.basedir}/reports</outputDirectory> -->
	</reporting>

	<properties>
		<java.version>17</java.version>
		<java.source>${java.version}</java.source>
		<java.target>${java.version}</java.target>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<encoding>UTF-8</encoding>
		<encoding.source>${encoding}</encoding.source>
		<encoding.reporting>${encoding}</encoding.reporting>
		<project.build.sourceEncoding>${encoding}</project.build.sourceEncoding>
		<project.reporting.outputEncoding>${encoding}</project.reporting.outputEncoding>
        <!-- Environment Profile if "$ENVIRONMENT" is not provided (local / dev / pre / pro) -->
        <mvn.environment>local</mvn.environment>

		<!-- SpringCloud: Needed for ConfigServer Import -->
		<spring-cloud.version>2022.0.3</spring-cloud.version>

		<!-- Common libraries -->
			<!-- Already on spring-boot-dependencies -->
		<mariadb.version>3.1.4</mariadb.version>
        <postgresql.version>42.6.0</postgresql.version>
		<mockito.version>5.4.0</mockito.version>
		<testcontainers.version>1.18.3</testcontainers.version>
		<lombok.version>1.18.28</lombok.version>
			<!-- dotenv -->
		<spring-dotenv.version>4.0.0</spring-dotenv.version>
			<!-- Lombok -->
		<lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
			<!-- MapStruct -->
		<mapstruct.version>1.5.5.Final</mapstruct.version>
			<!-- EasyRandom -->
		<easy-random.version>5.0.0</easy-random.version>
			<!-- JaCoCo -->
		<jacoco.version>0.8.10</jacoco.version>
			<!-- OpenAPI / Swagger -->
		<springdoc-openapi.version>2.1.0</springdoc-openapi.version>
		<openapi-generator.version>6.6.0</openapi-generator.version>
		<jackson-databind-nullable.version>0.2.6</jackson-databind-nullable.version>
		<swagger-parser.version>2.1.16</swagger-parser.version>

        <!-- Vulnerable Dependencies Updates -->
            <!-- For spring-boot-starter (3.1.2) -->
        <snakeyaml.version>2.0</snakeyaml.version>
	</properties>

	<dependencies>
		<!-- Spring Boot -->
			<!-- Starter Test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

			<!-- Security -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>

			<!-- Spring Boot Cloud Config: Needed for ConfigServer Import -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>

			<!-- Actuator -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

			<!-- Blocking WebMVC or Reactive WebFux -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
			<!-- Spring DataBase Libraries -->
				<!-- Spring Data JPA (Blocking JDBC Connector) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
				<!-- Bean Validation with Hibernate (for Spring Data JPA) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!-- Spring Boot Test: TestContainers -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-testcontainers</artifactId>
			<scope>test</scope>
		</dependency>
			<!-- TestContainers JUnit 5 -->
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
			<!-- TestContainer for DataBase -->
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
				<!-- DataBase Connector -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${postgresql.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Common Libraries -->
			<!-- dotenv -->
		<dependency>
			<groupId>me.paulschwarz</groupId>
			<artifactId>spring-dotenv</artifactId>
			<version>${spring-dotenv.version}</version>
		</dependency>
			<!-- Lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok-mapstruct-binding</artifactId>
			<version>${lombok-mapstruct-binding.version}</version>
		</dependency>
			<!-- MapStruct -->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
			<!-- Junit / Mockito Testing -->
				<!-- JUnit 5 -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>${junit-jupiter.version}</version>
			<scope>test</scope>
		</dependency>
				<!-- Mockito for JUnit 5 -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
				<!-- Easy Random -->
		<dependency>
			<groupId>org.jeasy</groupId>
			<artifactId>easy-random-core</artifactId>
			<version>${easy-random.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- OpenAPI / Swagger -->
			<!-- SpringDoc -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc-openapi.version}</version>
		</dependency>
			<!-- OpenAPI Generator -->
		<dependency>
			<groupId>org.openapitools</groupId>
			<artifactId>jackson-databind-nullable</artifactId>
			<version>${jackson-databind-nullable.version}</version>
		</dependency>
		<dependency>
			<groupId>io.swagger.parser.v3</groupId>
			<artifactId>swagger-parser</artifactId>
			<version>${swagger-parser.version}</version>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<!-- Spring Boot Cloud Dependencies: Needed for ConfigServer Import -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
                    <environmentVariables>
                        <ENVIRONMENT>${mvn.environment}</ENVIRONMENT>
                    </environmentVariables>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<!-- Lombok -->
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok-mapstruct-binding</artifactId>
							<version>${lombok-mapstruct-binding.version}</version>
						</path>
						<!-- MapStruct -->
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>

			<!-- OpenAPI Generator -->
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>${openapi-generator.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/openapi.yaml</inputSpec>
							<generatorName>spring</generatorName>
							<output>${project.build.directory}/generated-sources/openapi</output>
                            <apiPackage>${project.groupId}.${project.artifactId}.infrastructure.in.openapi</apiPackage>
                            <modelPackage>${project.groupId}.${project.artifactId}.infrastructure.in.model</modelPackage>
                            <!-- <generateSupportingFiles>true</generateSupportingFiles> -->
							<configOptions>
								<library>spring-boot</library>
								<documentationProvider>springdoc</documentationProvider>
								<interfaceOnly>true</interfaceOnly>
								<useTags>true</useTags>
								<!-- <requestMappingMode>none</requestMappingMode> -->
								<!-- <delegatePattern>true</delegatePattern> -->
								<!-- <apiFirst>true</apiFirst> -->

								<useSpringBoot3>true</useSpringBoot3>
								<reactive>false</reactive>
								<!-- <async>true</async> -->
								<serializableModel>true</serializableModel>
								<sourceFolder>/src/main/java</sourceFolder>

								<!-- <basePackage>${project.groupId}.${project.artifactId}</basePackage>
								<invokerPackage>${project.groupId}.${project.artifactId}</invokerPackage>
								<apiPackage>${project.groupId}.${project.artifactId}.application</apiPackage>
								<modelPackage>${project.groupId}.${project.artifactId}.model</modelPackage>
								<configPackage>${project.groupId}.${project.artifactId}.openapitools</configPackage> -->
							</configOptions>
							<typeMappings>
								<typeMapping>date-time-instant=Instant</typeMapping>
								<!-- <typeMapping>array+page=page</typeMapping> -->
							</typeMappings>
							<importMappings>
								<importMapping>Instant=java.time.Instant</importMapping>
                                <!-- <importMapping>MethodArgumentNotValidException=org.springframework.web.bind.MethodArgumentNotValidException</importMapping> -->
							</importMappings>
							<schemaMappings>
                                <!-- <schemaMapping>spring-exception=MethodArgumentNotValidException</schemaMapping> -->
								<!-- <schemaMapping>page=org.springframework.data.domain.Page</schemaMapping> -->
							</schemaMappings>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Spring Data JPA: Needed for default Hibernate implementation -->
			<plugin>
				<groupId>org.hibernate.orm.tooling</groupId>
				<artifactId>hibernate-enhance-maven-plugin</artifactId>
				<version>${hibernate.version}</version>
				<executions>
					<execution>
						<id>enhance</id>
						<goals>
							<goal>enhance</goal>
						</goals>
						<configuration>
							<enableLazyInitialization>true</enableLazyInitialization>
							<enableDirtyTracking>true</enableDirtyTracking>
							<enableAssociationManagement>true</enableAssociationManagement>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- GraalVM -->
			<!-- <plugin>
				<groupId>org.graalvm.buildtools</groupId>
				<artifactId>native-maven-plugin</artifactId>
			</plugin> -->
		</plugins>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
	</build>

	<profiles>
        <profile>
            <id>env</id>
            <activation>
                <property>
                    <name>ENVIRONMENT</name>
                </property>
            </activation>
            <properties>
                <mvn.environment>${env.ENVIRONMENT}</mvn.environment>
            </properties>
        </profile>

        <profile>
            <id>local</id>
            <activation>
                <property>
                    <name>ENVIRONMENT</name>
                    <value>local</value>
                </property>
            </activation>
            <dependencies>
                <!-- DevTools -->
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-configuration-processor</artifactId>
                    <optional>true</optional>
                </dependency>
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-devtools</artifactId>
                    <scope>runtime</scope>
                    <optional>true</optional>
                </dependency>
                <!-- <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-docker-compose</artifactId>
                    <scope>runtime</scope>
                    <optional>true</optional>
                </dependency> -->
            </dependencies>
        </profile>

		<profile>
			<id>coverage</id>
			<properties>
				<!-- SonarQube Config -->
                <!-- <sonar.host.url>${env.SONAR_HOST_URL}</sonar.host.url>
                <sonar.token>${env.SONAR_TOKEN}</sonar.token> -->
                <sonar.projectKey>${project.artifactId}</sonar.projectKey>
				<sonar.projectName>${project.artifactId}</sonar.projectName>
				<sonar.projectVersion>${project.version}</sonar.projectVersion>
				<!-- <sonar.language>java</sonar.language> -->
				<sonar.coverage.exclusions>
					**/configuration/**,
					**/config/**,
					**/${project.name}Application.*,
					**/infrastructure/primary/api/*,
					**/*Model.*,
					**/*ModelJPA.*,
					**/*Mapper.*,
					**/*MapperImpl.*,
					**/*MapperJPA.*,
					**/*MapperJPAImpl.*
				</sonar.coverage.exclusions>
				<sonar.coverage.jacoco.xmlReportPaths>
					${project.reporting.outputDirectory}/jacoco/jacoco.xml
				</sonar.coverage.jacoco.xmlReportPaths>
				<!-- https://docs.sonarsource.com/sonarqube/latest/analyzing-source-code/test-coverage/java-test-coverage/#single-module-maven-project -->
			</properties>
			<build>
				<plugins>
					<!-- JaCoCo -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco.version}</version>
						<configuration>
							<excludes>
								<!-- For Config Files -->
								<exclude>**/configuration/**</exclude>
								<exclude>**/config/**</exclude>
								<!-- For Spring Boot MainApplication -->
								<exclude>**/${project.name}Application.*</exclude>
								<!-- For OpenAPI Generator -->
								<exclude>**/infrastructure/primary/api/*</exclude>
								<!-- For Lombok Model -->
								<exclude>**/*Model.*</exclude>
								<exclude>**/*ModelJPA.*</exclude>
								<!-- For MapStruct Mappers -->
								<exclude>**/*Mapper.*</exclude>
								<exclude>**/*MapperImpl.*</exclude>
								<exclude>**/*MapperJPA.*</exclude>
								<exclude>**/*MapperJPAImpl.*</exclude>
							</excludes>
						</configuration>
						<executions>
							<execution>
								<id>prepare-agent</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>report</id>
								<!-- https://www.eclemma.org/jacoco/trunk/doc/report-mojo.html -->
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
									<formats>
										<format>XML</format>
										<!-- For Offline Analysis -->
										<format>HTML</format>
									</formats>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
